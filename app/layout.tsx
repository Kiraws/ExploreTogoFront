import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/providers/theme-providers"
import { ActiveThemeProvider } from "@/components/active-theme"
import { cookies } from "next/headers";
import { cn } from "@/lib/utils";
import { ConditionalNavbar } from "@/components/conditional-navbar";
import { Toaster } from "@/components/ui/sonner"

// const META_THEME_COLORS = {
//   light: "#ffffff",
//   dark: "#09090b",
// }

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Typed user data based on your backend response
type UserData = {
  id?: string;
  name?: string;
  firstname?: string;
  role?: string;
  email?: string;
  avatar?: string;
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();
  const activeThemeValue = cookieStore.get("active_theme")?.value;
  const isScaled = activeThemeValue?.endsWith("-scaled");
  let initialUser: UserData | null = null;
  try {
    const userDataRaw = cookieStore.get("userData")?.value;
    if (userDataRaw) {
      initialUser = JSON.parse(userDataRaw) as UserData;
    }
  } catch {
    initialUser = null;
  }
  return (
    <html lang="en" suppressHydrationWarning>
      <body
       className={cn(
          "bg-background overscroll-none font-sans antialiased",
          activeThemeValue ? `theme-${activeThemeValue}` : "",
          isScaled ? "theme-scaled" : ""
        )}
      >
         <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
            enableColorScheme
          >
            <ActiveThemeProvider initialTheme={activeThemeValue}>
              <ConditionalNavbar initialUser={initialUser} />
              <main className="">
                {children}
                <Toaster />
              </main>
            </ActiveThemeProvider>
          </ThemeProvider>
      </body>
    </html>
  );
}
